---
layout: post
title:      "Rails Project - LendingLibrary"
date:       2019-01-09 21:20:48 +0000
permalink:  rails_project_lending_library
---

![LendingLibrary](https://i.imgur.com/9Wtz2Uk.png)

For my Rails Project I wanted to create an application that would track and manage a list of items that are community-donated. Users can add items by donating and borrow items through loans. Items would be listed by availability and items that were currently unavailable would show what user was currently borrowing the item. 

At the get go I thought this might be a simple undertaking but after many many hours tweaking and tweaking this application I fine was able to get things running smoothly. The biggest hump for me was nested routes and the issues that arose when you tried to submit an update from an "unrelated" page. 

![Item Show Page](https://i.imgur.com/pcbvyhB.png) *Item Show Page*

![Loan Index Page](https://i.imgur.com/id9azDl.png) *Loan Index Page*


For example, the **Return Item** button on my* item show* and *loans index page* were both generated by form_for on a @loan object. But since the button on my item show page the routing got messed up as the loans index was nested within the users route: ![users route](https://i.imgur.com/kWVjVME.png).  So with some google-fu and head banging on the wall I found that you can specify a controller and action in form_for when inside the item show page:

```
<!-- Simple, form_for on Loan object from loan index page -->
<%= form_for [loan] do |f| %>

<!-- Slightly more complicated but explicit on Loan object from item show page -->
<%= form_for @loan, :url => {:controller => "loans", :action => "update"} do |f| %>
```

So context can be very important when it comes to utilizing Rails magic in you app because it does a lot of assuming which can be a good or bad thing. When Rails make the wrong assumption though, you have to be explicit when explaining exactly where you want it to go. 
